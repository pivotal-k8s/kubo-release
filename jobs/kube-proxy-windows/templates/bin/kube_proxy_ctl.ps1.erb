$ErrorActionPreference = "Stop";
trap { $host.SetShouldExit(1) }

function ensure_kubelet_is_running {
  curl.exe --fail http://localhost:10248/healthz
  if (-not $?) {
    throw "kubelet is not available"
  }
}

function start_kube_proxy {
  $network = Get-HnsNetwork | ? Type -Eq L2Bridge
  $env:KUBE_NETWORK = $network.Name
  $nodename = hostname

<%
  if_p('cloud-provider') do |cloud_provider|
    if cloud_provider == "vsphere"
%>
  C:\var\vcap\packages\kubernetes-windows\bin\kube-proxy.exe -v 5 `
    --nodename-override $nodename `
    --config /var/vcap/jobs/kube-proxy-windows/config/config.yml
<%else%>
  C:\var\vcap\packages\kubernetes-windows\bin\kube-proxy.exe -v 5 `
    --config /var/vcap/jobs/kube-proxy-windows/config/config.yml
<%end%>
<%end%>
}

function check_for_networking {
  $subnetConfig="/run/flannel/subnet.env"

  if (-not ([System.IO.File]::Exists($subnetConfig)))
  {
    throw "$subnetConfig does not exist, waiting for flannel initialization"
  }
}

function main() {
  check_for_networking
  start_kube_proxy
}

main
